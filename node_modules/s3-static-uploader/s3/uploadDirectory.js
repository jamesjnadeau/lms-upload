"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const walkDirectory_1 = require("../utils/walkDirectory");
const uploadObject_1 = require("./uploadObject");
function uploadDirectory(s3, // An initialised and configured S3 Lib
    bucketName, // The name of the bucket you want to delete items from
    directoryPath, // The object you want to delete
    pathTransform) {
    return __awaiter(this, void 0, void 0, function* () {
        // Create an array of files in the directory
        const directoryFiles = yield walkDirectory_1.walkDirectory(directoryPath);
        // Upload every file in the directory
        return Promise.all(directoryFiles
            .map((file) => uploadObject_1.uploadObject(s3, bucketName, file, directoryPath, pathTransform)));
    });
}
exports.uploadDirectory = uploadDirectory;
