"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const promisify_1 = require("../utils/promisify");
const mime_1 = require("mime");
function uploadObject(s3, // An initialised and configured S3 Lib
    bucketName, // The name of the bucket you want to delete items from
    path, // The path of the item you want to upload
    directoryPath, // The root directory path
    pathTransform) {
    return __awaiter(this, void 0, void 0, function* () {
        const body = yield fs_extra_1.readFile(path);
        const pathWithoutRoot = path.replace(`${directoryPath}/`, '');
        const Key = pathTransform ? pathTransform(pathWithoutRoot) : pathWithoutRoot;
        const params = {
            ContentType: mime_1.getType(pathWithoutRoot),
            Bucket: bucketName,
            Key,
            Body: body,
        };
        return promisify_1.promisify(s3.putObject.bind(s3))(params);
    });
}
exports.uploadObject = uploadObject;
